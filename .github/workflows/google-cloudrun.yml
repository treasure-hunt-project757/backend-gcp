# This workflow build and push a Docker container to Google Artifact Registry and deploy it on Cloud Run when a commit is pushed to the "main" branch
#
# Overview:
#
# 1. Authenticate to Google Cloud
# 2. Authenticate Docker to Artifact Registry
# 3. Build a docker container
# 4. Publish it to Google Artifact Registry
# 5. Deploy it to Cloud Run
#
# To configure this workflow:
#
# 1. Ensure the required Google Cloud APIs are enabled:
#
#    Cloud Run            run.googleapis.com
#    Artifact Registry    artifactregistry.googleapis.com
#
# 2. Create and configure Workload Identity Federation for GitHub (https://github.com/google-github-actions/auth#setting-up-workload-identity-federation)
#
# 3. Ensure the required IAM permissions are granted
#
#    Cloud Run
#      roles/run.admin
#      roles/iam.serviceAccountUser     (to act as the Cloud Run runtime service account)
#
#    Artifact Registry
#      roles/artifactregistry.admin     (project or repository level)
#
#    NOTE: You should always follow the principle of least privilege when assigning IAM roles
#
# 4. Create GitHub secrets for WIF_PROVIDER and WIF_SERVICE_ACCOUNT
#
# 5. Change the values for the GAR_LOCATION, SERVICE and REGION environment variables (below).
#
# NOTE: To use Google Container Registry instead, replace ${{ env.GAR_LOCATION }}-docker.pkg.dev with gcr.io
#
# For more support on how to run this workflow, please visit https://github.com/marketplace/actions/deploy-to-cloud-run
#
# Further reading:
#   Cloud Run IAM permissions                 - https://cloud.google.com/run/docs/deploying
#   Artifact Registry IAM permissions         - https://cloud.google.com/artifact-registry/docs/access-control#roles
#   Container Registry vs Artifact Registry   - https://cloud.google.com/blog/products/application-development/understanding-artifact-registry-vs-container-registry
#   Principle of least privilege              - https://cloud.google.com/blog/products/identity-security/dont-get-pwned-practicing-the-principle-of-least-privilege

name: Build and Deploy to Cloud Runcloud

on:
  push:
    branches: [ "main" ]
#  workflow_dispatch:


env:
  PROJECT_ID: iucc-treasure-hunt-at-sheba-mc
  GAR_LOCATION: us-central1
  SERVICE: backend-gcp
  REGION: us-central1
  REPOSITORY: backend-gcp-repo
#  WORKLOAD_IDENTITY_PROVIDER: ${{ secrets.WIF_PROVIDER }}
  WORKLOAD_IDENTITY_PROVIDER: projects/913716591776/locations/global/workloadIdentityPools/github/providers/my-repo
  SERVICE_ACCOUNT: backend-build-deploy-gcr@iucc-treasure-hunt-at-sheba-mc.iam.gserviceaccount.com
#  SERVICE_ACCOUNT: ${{ secrets.WIF_SERVICE_ACCOUNT }}


jobs:
  deploy:
    permissions:
      contents: 'read'
      id-token: 'write'

    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Build with Maven
        run: mvn --batch-mode --update-snapshots verify


      - name: Authenticate to Google Cloud
        id: auth
        uses: 'google-github-actions/auth@v2'
        with:
          workload_identity_provider: ${{ env.WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ env.SERVICE_ACCOUNT }}
          token_format: 'access_token'


      - name: Verify Artifact Registry
        run: |
          gcloud artifacts repositories list --project=${{ env.PROJECT_ID }} --location=${{ env.GAR_LOCATION }}
          gcloud artifacts repositories describe ${{ env.REPOSITORY }} --project=${{ env.PROJECT_ID }} --location=${{ env.GAR_LOCATION }}


      - name: Docker Auth
        uses: docker/login-action@v3
        with:
          registry: ${{ env.GAR_LOCATION }}-docker.pkg.dev
          username: oauth2accesstoken
          password: ${{ steps.auth.outputs.access_token }}


      - name: Debug Info
        run: |
          echo "Access token available: ${{ steps.auth.outputs.access_token != '' }}"
          echo "GAR_LOCATION: ${{ env.GAR_LOCATION }}"
          echo "PROJECT_ID: ${{ env.PROJECT_ID }}"
          gcloud auth list
          gcloud config list

      - name: Build and Push Container
        run: |-
          docker build -t "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE }}:${{ github.sha }}" ./
          docker push "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE }}:${{ github.sha }}"


      - name: Deploy to Cloud Run
        id: deploy
        uses: google-github-actions/deploy-cloudrun@v2
        with:
          service: ${{ env.SERVICE }}
          region: ${{ env.REGION }}
          image: ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE }}:${{ github.sha }}
          flags: '--allow-unauthenticated'

#      - name: Get Cloud SQL Instance from Secret Manager
#        id: get-cloudsql-instance
#        run: |
#          echo "CLOUDSQL_INSTANCE=$(gcloud secrets versions access latest --secret=DB_CLOUD_SQL_INSTANCE)" >> $GITHUB_OUTPUT
#
#      - name: Deploy to Cloud Run
#        id: deploy
#        uses: google-github-actions/deploy-cloudrun@v2
#        with:
#          service: ${{ env.SERVICE }}
#          region: ${{ env.REGION }}
#          image: ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE }}:${{ github.sha }}
#          env_vars: |
#            SPRING_PROFILES_ACTIVE=production
#          secrets: |
#            DB_DATABASE=DB_DATABASE:latest
#            DB_USERNAME=DB_USERNAME:latest
#            DB_PASSWORD=DB_PASSWORD:latest
#          flags: |
#            --allow-unauthenticated
#            --add-cloudsql-instances=${{ steps.get-cloudsql-instance.outputs.CLOUDSQL_INSTANCE }}
#            --set-secrets=DB_CLOUD_SQL_INSTANCE=DB_CLOUD_SQL_INSTANCE:latest



#      - name: Deploy to Cloud Run
#        id: deploy
#        run: |
#          gcloud run deploy ${{ env.SERVICE }} \
#            --image ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE }}:${{ github.sha }} \
#            --quiet \
#            --platform managed \
#            --region ${{ env.REGION }} \
#            --project ${{ env.PROJECT_ID }} \
#            --format json \
#            --update-secrets DB_DATABASE=DB_DATABASE:latest \
#            --update-secrets DB_USERNAME=DB_USERNAME:2 \
#            --update-secrets DB_PASSWORD=DB_PASSWORD:2 \
#            --update-secrets DB_CLOUD_SQL_INSTANCE=DB_CLOUD_SQL_INSTANCE:1 \
#            --service-account ${{ env.SERVICE_ACCOUNT }} \
#            --allow-unauthenticated


      - name: View Cloud Run logs
        if: failure()
        run: |
          gcloud run logs read ${{ env.SERVICE }} --region ${{ env.REGION }} --limit=50

      - name: Show Output
        run: echo ${{ steps.deploy.outputs.url }}

      - name: Clean up old images
        run: |
          gcloud artifacts docker images delete ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE }} --quiet --delete-tags
        continue-on-error: true
